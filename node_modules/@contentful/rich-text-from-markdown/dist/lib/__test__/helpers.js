"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.document = document;
exports.block = block;
exports.inline = inline;
exports.text = text;
exports.mark = mark;
var rich_text_types_1 = require("@contentful/rich-text-types");
var defaultProps = { data: {} };
function document(props) {
    if (props === void 0) { props = defaultProps; }
    var content = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        content[_i - 1] = arguments[_i];
    }
    return __assign({ nodeType: rich_text_types_1.BLOCKS.DOCUMENT, data: {}, content: content }, props);
}
function block(nodeType, props) {
    if (props === void 0) { props = defaultProps; }
    var content = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        content[_i - 2] = arguments[_i];
    }
    return __assign({ nodeType: nodeType, content: content, data: {} }, props);
}
function inline(nodeType, props) {
    if (props === void 0) { props = defaultProps; }
    var content = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        content[_i - 2] = arguments[_i];
    }
    return __assign({ nodeType: nodeType, data: {}, content: content }, props);
}
function text(value) {
    var marks = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        marks[_i - 1] = arguments[_i];
    }
    return {
        nodeType: 'text',
        data: {},
        marks: marks,
        value: value,
    };
}
function mark(type) {
    return {
        type: type,
    };
}
//# sourceMappingURL=helpers.js.map