"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var rich_text_types_1 = require("@contentful/rich-text-types");
var __1 = require("..");
var helpers_1 = require("./helpers");
describe('rich-text-from-markdown', function () {
    test('should parse some markdown', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, __1.richTextFromMarkdown)('# Hello World')];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual((0, helpers_1.document)({}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_1, {}, (0, helpers_1.text)('Hello World'))));
                    return [2 /*return*/];
            }
        });
    }); });
    test('should call the fallback function when a node is not supported', function () { return __awaiter(void 0, void 0, void 0, function () {
        var fakeNode, fallback, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fakeNode = { nodeType: 'image', data: {} };
                    fallback = jest.fn(function () { return Promise.resolve(fakeNode); });
                    return [4 /*yield*/, (0, __1.richTextFromMarkdown)('![image](https://image.example.com/image.jpg)', fallback)];
                case 1:
                    result = _a.sent();
                    expect(fallback).toHaveBeenCalledTimes(1);
                    expect(result).toEqual({
                        nodeType: rich_text_types_1.BLOCKS.DOCUMENT,
                        data: {},
                        content: [
                            {
                                nodeType: 'image',
                                data: {},
                            },
                        ],
                    });
                    return [2 /*return*/];
            }
        });
    }); });
});
describe.each([
    ['*This is an italic text*', ['This is an italic text', 'italic']],
    ['__This a bold text__', ['This a bold text', 'bold']],
    ['`This is code`', ['This is code', 'code']],
    [
        '__This is bold and *this is an italic*__',
        ['This is bold and ', 'bold'],
        ['this is an italic', 'bold', 'italic'],
    ],
])('The markdown "%s" should be parsed to text with value "%s"', function (markdown) {
    var expectedTextWithMarks = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        expectedTextWithMarks[_i - 1] = arguments[_i];
    }
    test("".concat(markdown), function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, __1.richTextFromMarkdown)(markdown)];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual((0, helpers_1.document)({}, helpers_1.block.apply(void 0, __spreadArray([rich_text_types_1.BLOCKS.PARAGRAPH,
                        {}], expectedTextWithMarks.map(function (_a) {
                        var expectedText = _a[0], expectedMarkTypes = _a.slice(1);
                        return helpers_1.text.apply(void 0, __spreadArray([expectedText], expectedMarkTypes.map(helpers_1.mark), false));
                    }), false))));
                    return [2 /*return*/];
            }
        });
    }); });
});
describe('parses complex inline image markdown correctly', function () {
    test('incoming markdown tree calls fallback twice', function () { return __awaiter(void 0, void 0, void 0, function () {
        var fakeNode, fallback, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fakeNode = { nodeType: 'image', data: {} };
                    fallback = jest.fn(function () { return Promise.resolve(fakeNode); });
                    return [4 /*yield*/, (0, __1.richTextFromMarkdown)("![image](https://image.example.com/image.jpg)\n      ![image](https://image.example.com/image2.jpg)", fallback)];
                case 1:
                    result = _a.sent();
                    expect(fallback).toBeCalledTimes(2);
                    expect(result).toEqual({
                        nodeType: 'document',
                        data: {},
                        content: [
                            {
                                nodeType: 'image',
                                data: {},
                            },
                            (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)("\n")),
                            {
                                nodeType: 'image',
                                data: {},
                            },
                        ],
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    test('incoming markdown tree calls fallback twice', function () { return __awaiter(void 0, void 0, void 0, function () {
        var fakeNode, fallback, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fakeNode = { nodeType: 'image', data: {} };
                    fallback = jest.fn(function () { return Promise.resolve(fakeNode); });
                    return [4 /*yield*/, (0, __1.richTextFromMarkdown)("some text ![image](https://image.example.com/image.jpg)![image](https://image.example.com/image2.jpg) some more text", fallback)];
                case 1:
                    result = _a.sent();
                    expect(fallback).toBeCalledTimes(2);
                    expect(result).toEqual({
                        nodeType: 'document',
                        data: {},
                        content: [
                            (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('some text ')),
                            {
                                nodeType: 'image',
                                data: {},
                            },
                            {
                                nodeType: 'image',
                                data: {},
                            },
                            (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)(' some more text')),
                        ],
                    });
                    return [2 /*return*/];
            }
        });
    }); });
});
describe('links', function () {
    test('should correctly convert a link', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, __1.richTextFromMarkdown)('[This is a link](https://contentful.com)')];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual((0, helpers_1.document)({}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.inline)(rich_text_types_1.INLINES.HYPERLINK, {
                        data: {
                            uri: 'https://contentful.com',
                        },
                    }, (0, helpers_1.text)('This is a link')))));
                    return [2 /*return*/];
            }
        });
    }); });
    test('should convert link wrapped in a mark', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, __1.richTextFromMarkdown)('*This is a test [Contentful](https://www.contentful.com/). Text text*')];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual((0, helpers_1.document)({}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('This is a test ', (0, helpers_1.mark)(rich_text_types_1.MARKS.ITALIC)), (0, helpers_1.inline)(rich_text_types_1.INLINES.HYPERLINK, {
                        data: {
                            uri: 'https://www.contentful.com/',
                        },
                    }, (0, helpers_1.text)('Contentful', (0, helpers_1.mark)(rich_text_types_1.MARKS.ITALIC))), (0, helpers_1.text)('. Text text', (0, helpers_1.mark)(rich_text_types_1.MARKS.ITALIC)))));
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=index.test.js.map