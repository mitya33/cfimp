"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var rich_text_types_1 = require("@contentful/rich-text-types");
var fs_1 = require("fs");
var path_1 = __importDefault(require("path"));
var __1 = require("..");
var helpers_1 = require("./helpers");
describe('rich-text-from-markdown', function () {
    it('should parse md with all formatting options', function () { return __awaiter(void 0, void 0, void 0, function () {
        var md, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    md = (0, fs_1.readFileSync)(path_1.default.resolve(__dirname, './real-world.md'), 'utf8');
                    return [4 /*yield*/, (0, __1.richTextFromMarkdown)(md)];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual((0, helpers_1.document)({}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_1, {}, (0, helpers_1.text)('h1 Heading')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_2, {}, (0, helpers_1.text)('h2 Heading')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_3, {}, (0, helpers_1.text)('h3 Heading')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_4, {}, (0, helpers_1.text)('h4 Heading')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_5, {}, (0, helpers_1.text)('h5 Heading')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_6, {}, (0, helpers_1.text)('h6 Heading')), 
                    // Paragraphs
                    (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_2, {}, (0, helpers_1.text)('Paragraphs')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)("This is a paragraph\nwith a new line.")), (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('This is a new paragraph.')), 
                    // TODO: <br /> test should be ideally the same as the new line one.
                    (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('This is a paragraph'), (0, helpers_1.text)('\n'), (0, helpers_1.text)('using br.')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_2, {}, (0, helpers_1.text)('Horizontal Rules')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.HR), (0, helpers_1.block)(rich_text_types_1.BLOCKS.HR), (0, helpers_1.block)(rich_text_types_1.BLOCKS.HR), (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_2, {}, (0, helpers_1.text)('Emphasis')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('This is bold text', (0, helpers_1.mark)(rich_text_types_1.MARKS.BOLD))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('This is bold text', (0, helpers_1.mark)(rich_text_types_1.MARKS.BOLD))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('This is italic text', (0, helpers_1.mark)(rich_text_types_1.MARKS.ITALIC))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('This is italic text', (0, helpers_1.mark)(rich_text_types_1.MARKS.ITALIC))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Strikethrough is not supported')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_2, {}, (0, helpers_1.text)('Blockquotes')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.QUOTE, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Blockquotes'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_2, {}, (0, helpers_1.text)('Lists')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Unordered')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.UL_LIST, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Create a list by starting a line with '), (0, helpers_1.text)('+', (0, helpers_1.mark)(rich_text_types_1.MARKS.CODE)), (0, helpers_1.text)(', '), (0, helpers_1.text)('-', (0, helpers_1.mark)(rich_text_types_1.MARKS.CODE)), (0, helpers_1.text)(', or '), (0, helpers_1.text)('*', (0, helpers_1.mark)(rich_text_types_1.MARKS.CODE)))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Sub-lists are made by indenting 2 spaces:')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.UL_LIST, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Marker character change forces new list start:')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.UL_LIST, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Ac tristique libero volutpat at')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.UL_LIST, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Facilisis in pretium nisl aliquet')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.UL_LIST, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Nulla volutpat aliquam velit'))))))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Very easy!'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Here is a list item'), (0, helpers_1.text)('\n'), (0, helpers_1.text)('with a line break')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Ordered')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.OL_LIST, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Lorem ipsum dolor sit amet'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Consectetur adipiscing elit'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Integer molestie lorem at massa'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('You can use sequential numbers...'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('...or keep all the numbers as '), (0, helpers_1.text)('1.', (0, helpers_1.mark)(rich_text_types_1.MARKS.CODE))))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Start numbering with offset:')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.OL_LIST, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('foo'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.LIST_ITEM, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('bar')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_2, {}, (0, helpers_1.text)('Code')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Inline '), (0, helpers_1.text)('code', (0, helpers_1.mark)('code'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_2, {}, (0, helpers_1.text)('Links')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.inline)(rich_text_types_1.INLINES.HYPERLINK, { data: { uri: 'https://www.contentful.com' } }, (0, helpers_1.text)('link text'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.inline)(rich_text_types_1.INLINES.HYPERLINK, { data: { uri: 'https://www.contentful.com/blog/' } }, (0, helpers_1.text)('link with title'))), 
                    // Tables
                    (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_2, {}, (0, helpers_1.text)('Tables')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Name'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Country')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Test 1'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Germany')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Test 2'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('USA')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('> Test 3'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('USA')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('* Test 4'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Germany')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('# Test 5'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Germany')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Test 6'), (0, helpers_1.text)('\n'), (0, helpers_1.text)('Test 7'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('USA')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Test 8'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('USA')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Test 9'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Germany')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Test 10'), (0, helpers_1.text)(' and '), (0, helpers_1.text)('Test 11'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Germany')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)(''))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Germany')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)(''))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Brazil')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.inline)(rich_text_types_1.INLINES.HYPERLINK, { data: { uri: 'https://example.com' } }, (0, helpers_1.text)('Test 12', (0, helpers_1.mark)(rich_text_types_1.MARKS.BOLD))))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('USA'))))), 
                    // Tables with marks
                    (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_2, {}, (0, helpers_1.text)('Tables with marks')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Bold Header 1', (0, helpers_1.mark)(rich_text_types_1.MARKS.BOLD)))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Bold Header 2', (0, helpers_1.mark)(rich_text_types_1.MARKS.BOLD))))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Italic', (0, helpers_1.mark)(rich_text_types_1.MARKS.ITALIC)))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Code', (0, helpers_1.mark)(rich_text_types_1.MARKS.CODE)))))), 
                    // Tables without body
                    (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_2, {}, (0, helpers_1.text)('Tables without body')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('abc'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('def'))))), 
                    // Tables with empty cells
                    (0, helpers_1.block)(rich_text_types_1.BLOCKS.HEADING_2, {}, (0, helpers_1.text)('Table with empty cells')), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)(''))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Cell 1'))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('')))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_ROW, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)(''))), (0, helpers_1.block)(rich_text_types_1.BLOCKS.TABLE_CELL, {}, (0, helpers_1.block)(rich_text_types_1.BLOCKS.PARAGRAPH, {}, (0, helpers_1.text)('Cell 2')))))));
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=real-world.test.js.map