{"version":3,"file":"rich-text-from-markdown.es5.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  BLOCKS,\n  Block,\n  Document,\n  Hyperlink,\n  INLINES,\n  Inline,\n  Node,\n  Text,\n  TopLevelBlock,\n} from '@contentful/rich-text-types';\nimport _ from 'lodash';\nimport gfm from 'remark-gfm';\nimport markdown from 'remark-parse';\nimport unified from 'unified';\n\nimport { MarkdownLinkNode, MarkdownNode, MarkdownTree } from './types';\n\nconst markdownNodeTypes = new Map<string, string>([\n  ['paragraph', BLOCKS.PARAGRAPH],\n  ['heading', 'heading'],\n  ['text', 'text'],\n  ['emphasis', 'text'],\n  ['strong', 'text'],\n  ['delete', 'text'],\n  ['inlineCode', 'text'],\n  ['link', INLINES.HYPERLINK],\n  ['thematicBreak', BLOCKS.HR],\n  ['blockquote', BLOCKS.QUOTE],\n  ['list', 'list'],\n  ['listItem', BLOCKS.LIST_ITEM],\n  ['table', BLOCKS.TABLE],\n  ['tableRow', BLOCKS.TABLE_ROW],\n  ['tableCell', BLOCKS.TABLE_CELL],\n]);\n\nconst nodeTypeFor = (node: MarkdownNode) => {\n  const nodeType = markdownNodeTypes.get(node.type);\n\n  switch (nodeType) {\n    case 'heading':\n      return `${nodeType}-${node.depth}`;\n    case 'list':\n      return `${node.ordered ? 'ordered' : 'unordered'}-list`;\n    default:\n      return nodeType;\n  }\n};\n\nconst markTypes = new Map([\n  ['emphasis', 'italic'],\n  ['strong', 'bold'],\n  ['inlineCode', 'code'],\n]);\nconst markTypeFor = (node: MarkdownNode) => {\n  return markTypes.get(node.type);\n};\n\nconst isLink = (node: MarkdownNode): node is MarkdownLinkNode => {\n  return node.type === 'link';\n};\n\nconst nodeContainerTypes = new Map([\n  ['delete', 'block'],\n  [BLOCKS.HEADING_1, 'block'],\n  [BLOCKS.HEADING_2, 'block'],\n  [BLOCKS.HEADING_3, 'block'],\n  [BLOCKS.HEADING_4, 'block'],\n  [BLOCKS.HEADING_5, 'block'],\n  [BLOCKS.HEADING_6, 'block'],\n  [BLOCKS.LIST_ITEM, 'block'],\n  [BLOCKS.UL_LIST, 'block'],\n  [BLOCKS.OL_LIST, 'block'],\n  [BLOCKS.QUOTE, 'block'],\n  [BLOCKS.HR, 'block'],\n  [BLOCKS.PARAGRAPH, 'block'],\n  [BLOCKS.TABLE, 'block'],\n  [BLOCKS.TABLE_CELL, 'block'],\n  [BLOCKS.TABLE_HEADER_CELL, 'block'],\n  [BLOCKS.TABLE_ROW, 'block'],\n  [INLINES.HYPERLINK, 'inline'],\n  ['text', 'text'],\n  ['emphasis', 'text'],\n  ['strong', 'text'],\n  ['inlineCode', 'text'],\n]);\n\nconst isBlock = (nodeType: string) => {\n  return nodeContainerTypes.get(nodeType) === 'block';\n};\n\nconst isText = (nodeType: string) => {\n  return nodeContainerTypes.get(nodeType) === 'text';\n};\n\nconst isInline = (nodeType: string) => {\n  return nodeContainerTypes.get(nodeType) === 'inline';\n};\n\nconst isTableCell = (nodeType: string) => {\n  return nodeType === BLOCKS.TABLE_CELL;\n};\n\nconst buildHyperlink = async (\n  node: MarkdownLinkNode,\n  fallback: FallbackResolver,\n  appliedMarksTypes: string[],\n): Promise<Hyperlink[]> => {\n  const content = (await mdToRichTextNodes(node.children, fallback, appliedMarksTypes)) as Text[];\n\n  const hyperlink: Hyperlink = {\n    nodeType: INLINES.HYPERLINK,\n    data: { uri: node.url },\n    content,\n  };\n\n  return [hyperlink];\n};\n\nconst buildGenericBlockOrInline = async (\n  node: MarkdownNode,\n  fallback: FallbackResolver,\n  appliedMarksTypes: string[],\n): Promise<Array<Block | Inline>> => {\n  const nodeType = nodeTypeFor(node);\n  const content = await mdToRichTextNodes(node.children, fallback, appliedMarksTypes);\n\n  return [\n    {\n      nodeType: nodeType,\n      content,\n      data: {},\n    } as Block | Inline,\n  ];\n};\n\nconst buildTableCell = async (\n  node: MarkdownNode,\n  fallback: FallbackResolver,\n  appliedMarksTypes: string[],\n): Promise<Array<Block>> => {\n  const nodeChildren = await mdToRichTextNodes(node.children, fallback, appliedMarksTypes);\n\n  const content = nodeChildren.reduce((result, contentNode) => {\n    if (isText(contentNode.nodeType) || isInline(contentNode.nodeType)) {\n      const lastNode = result[result.length - 1];\n      if (lastNode && lastNode.nodeType === BLOCKS.PARAGRAPH) {\n        lastNode.content.push(contentNode);\n      } else {\n        result.push({ nodeType: BLOCKS.PARAGRAPH, data: {}, content: [contentNode] });\n      }\n    } else {\n      result.push(contentNode);\n    }\n\n    return result;\n  }, []);\n\n  // A table cell can't be empty\n  if (content.length === 0) {\n    content.push({\n      nodeType: BLOCKS.PARAGRAPH,\n      data: {},\n      content: [\n        {\n          nodeType: 'text',\n          data: {},\n          marks: [],\n          value: '',\n        } as Text,\n      ],\n    });\n  }\n\n  /**\n   * We should only support texts inside table cells.\n   * Some markdowns might contain html inside tables such as <ul>, <blockquote>, etc\n   * but they are pretty much filtered out by markdownNodeTypes and nodeContainerTypes variables.\n   * so we ended up receiving only `text` nodes.\n   * We can't have table cells with text nodes directly, we must wrap text nodes inside paragraphs.\n   */\n  return [\n    {\n      nodeType: BLOCKS.TABLE_CELL,\n      content,\n      data: {},\n    } as Block,\n  ];\n};\n\nconst buildText = async (\n  node: MarkdownNode,\n  fallback: FallbackResolver,\n  appliedMarksTypes: string[],\n): Promise<Array<Inline | Text>> => {\n  const nodeType = nodeTypeFor(node);\n  const markType = markTypeFor(node);\n  const marks = Array.from(appliedMarksTypes);\n  if (markType) {\n    marks.push(markType);\n  }\n\n  if (node.type !== 'text' && node.children) {\n    return (await mdToRichTextNodes(node.children, fallback, marks)) as Array<Inline | Text>;\n  }\n\n  if (node.value) {\n    return [\n      {\n        nodeType: nodeType,\n        value: node.value,\n        marks: marks.map((type) => ({ type })),\n        data: {},\n      } as Text,\n    ];\n  }\n};\n\nconst buildFallbackNode = async (\n  node: MarkdownNode,\n  fallback: FallbackResolver,\n): Promise<Node[]> => {\n  const fallbackResult = await fallback(node);\n\n  if (_.isArray(fallbackResult)) {\n    return fallbackResult;\n  }\n  return [fallbackResult];\n};\n\nasync function mdToRichTextNode(\n  node: MarkdownNode,\n  fallback: FallbackResolver,\n  appliedMarksTypes: string[] = [],\n): Promise<Node[]> {\n  // By default <br/> is parsed as html node, causing it to be stripped out.\n  // We need to convert it manually in order to support it\n  if (node.type === 'html' && /<br\\s?\\/?>/gi.test(node.value)) {\n    node.value = '\\n';\n    node.type = 'text';\n  }\n\n  const nodeType = nodeTypeFor(node);\n\n  if (isLink(node)) {\n    return await buildHyperlink(node, fallback, appliedMarksTypes);\n  }\n\n  if (isTableCell(nodeType)) {\n    return await buildTableCell(node, fallback, appliedMarksTypes);\n  }\n\n  if (isBlock(nodeType) || isInline(nodeType)) {\n    return await buildGenericBlockOrInline(node, fallback, appliedMarksTypes);\n  }\n\n  if (isText(nodeType)) {\n    return await buildText(node, fallback, appliedMarksTypes);\n  }\n\n  return await buildFallbackNode(node, fallback);\n}\n\nasync function mdToRichTextNodes(\n  nodes: MarkdownNode[],\n  fallback: FallbackResolver,\n  appliedMarksTypes: string[] = [],\n): Promise<Node[]> {\n  if (!nodes) {\n    return Promise.resolve([]);\n  }\n  const rtNodes = await Promise.all(\n    nodes.map((node) => mdToRichTextNode(node, fallback, appliedMarksTypes)),\n  );\n\n  return _.flatten(rtNodes).filter(Boolean);\n}\n\nconst astToRichTextDocument = async (\n  tree: MarkdownTree,\n  fallback: FallbackResolver,\n): Promise<Document> => {\n  const content = await mdToRichTextNodes(tree.children, fallback);\n  return {\n    nodeType: BLOCKS.DOCUMENT,\n    data: {},\n    content: content as TopLevelBlock[],\n  };\n};\n\nfunction expandParagraphWithInlineImages(node: MarkdownNode): MarkdownNode[] {\n  if (node.type !== 'paragraph') {\n    return [node];\n  }\n\n  const imageNodeIndices = [];\n  for (let i = 0; i < node.children.length; i++) {\n    if (node.children[i].type === 'image') {\n      imageNodeIndices.push(i);\n    }\n  }\n\n  if (imageNodeIndices.length === 0) {\n    // If no images in children, return.\n    return [node];\n  }\n  const allNodes: MarkdownNode[] = [];\n  let lastIndex = -1;\n  for (let j = 0; j < imageNodeIndices.length; j++) {\n    const index = imageNodeIndices[j];\n    // before\n    if (index !== 0) {\n      const nodesBefore: MarkdownNode[] = node.children.slice(lastIndex + 1, index);\n\n      if (nodesBefore.length > 0) {\n        allNodes.push({\n          ...node,\n          children: nodesBefore,\n        });\n      }\n    }\n    // image\n    const imageNode = node.children[index];\n    allNodes.push(imageNode);\n\n    // till end\n    let nodesAfter: MarkdownNode[] = [];\n    const rangeEnd =\n      j + 1 < imageNodeIndices.length ? imageNodeIndices[j + 1] : node.children.length;\n    if (index + 1 < rangeEnd && index === imageNodeIndices.slice(-1)[0]) {\n      nodesAfter = node.children.slice(index + 1, rangeEnd);\n\n      if (nodesAfter.length > 0) {\n        allNodes.push({\n          ...node,\n          children: nodesAfter,\n        });\n      }\n    }\n    lastIndex = index;\n  }\n  return allNodes;\n}\n\n// Inline markdown images come in as nested within a MarkdownNode paragraph\n// so we must hoist them out before transforming to rich text.\nfunction prepareMdAST(ast: MarkdownTree): MarkdownNode {\n  function prepareASTNodeChildren(node: MarkdownNode): MarkdownNode {\n    if (!node.children) {\n      return node;\n    }\n\n    const children = _.flatMap(node.children, (n) => expandParagraphWithInlineImages(n)).map((n) =>\n      prepareASTNodeChildren(n),\n    );\n\n    return { ...node, children };\n  }\n\n  return prepareASTNodeChildren({\n    depth: '0',\n    type: 'root',\n    value: '',\n    ordered: true,\n    children: ast.children,\n  });\n}\n\n// COMPAT: can resolve with either Node or an array of Nodes for back compatibility.\nexport type FallbackResolver = (mdNode: MarkdownNode) => Promise<Node | Node[] | null>;\n\nexport async function richTextFromMarkdown(\n  md: string,\n  fallback: FallbackResolver = () => Promise.resolve(null),\n): Promise<Document> {\n  const processor = unified().use(markdown).use(gfm);\n  const tree = processor.parse(md);\n  // @ts-expect-error children is missing in the return type of processor.parse\n  const ast = prepareMdAST(tree);\n  return await astToRichTextDocument(ast, fallback);\n}\n"],"names":["BLOCKS","INLINES"],"mappings":"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"}