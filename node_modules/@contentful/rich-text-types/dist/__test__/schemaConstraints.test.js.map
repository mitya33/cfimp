{"version":3,"file":"schemaConstraints.test.js","sourceRoot":"","sources":["../../src/__test__/schemaConstraints.test.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,oCAAmC;AACnC,0DAAgF;AAEhF,IAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,eAAM,CAAC,CAAC;AAE7C,QAAQ,CAAC,oBAAoB,EAAE;IAC7B,EAAE,CAAC,gEAAgE,EAAE;QACnE,IAAM,MAAM;YACV,eAAM,CAAC,QAAQ;WACZ,+BAAW,SACX,mCAAe,SACf,MAAM,CAAC,IAAI,CAAC,8BAAU,CAAC,OAC3B,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC;QAC/D,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mEAAmE,EAAE;QACtE,iCAAiC;QACjC,IAAM,iBAAiB,GAAG,8BAAU,CAAC,eAAM,CAAC,UAAU,CAAC,CAAC;QAExD,2DAA2D;QAC3D,MAAM,CAAC,iBAAiB,CAAC,CAAC,SAAS,CAAC,eAAM,CAAC,OAAO,CAAC,CAAC;QACpD,MAAM,CAAC,iBAAiB,CAAC,CAAC,SAAS,CAAC,eAAM,CAAC,OAAO,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { BLOCKS } from '../blocks';\nimport { CONTAINERS, TEXT_CONTAINERS, VOID_BLOCKS } from '../schemaConstraints';\n\nconst allKnownBlocks = Object.values(BLOCKS);\n\ndescribe('schema constraints', () => {\n  it('all block node types are either considered a container or void', () => {\n    const blocks = [\n      BLOCKS.DOCUMENT, // Root block could be in CONTAINERS but isn't.\n      ...VOID_BLOCKS,\n      ...TEXT_CONTAINERS,\n      ...Object.keys(CONTAINERS),\n    ];\n    expect(blocks).toEqual(expect.arrayContaining(allKnownBlocks));\n    expect(blocks.length).toEqual(allKnownBlocks.length);\n  });\n\n  it('should allow UL_LIST and OL_LIST blocks as children of TABLE_CELL', () => {\n    // Get the children of TABLE_CELL\n    const tableCellChildren = CONTAINERS[BLOCKS.TABLE_CELL];\n\n    // Check that UL_LIST and OL_LIST are in the children array\n    expect(tableCellChildren).toContain(BLOCKS.UL_LIST);\n    expect(tableCellChildren).toContain(BLOCKS.OL_LIST);\n  });\n});\n"]}