{"version":3,"file":"validation.test.js","sourceRoot":"","sources":["../../src/__test__/validation.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { BLOCKS } from '../blocks';\nimport { INLINES } from '../inlines';\nimport type { Document } from '../types';\nimport { validateRichTextDocument } from '../validator';\n\ndescribe('validation', () => {\n  it('fails if it is not document node', () => {\n    // @ts-expect-error we force a wrong node type to check that it fails\n    const document: Document = { nodeType: BLOCKS.PARAGRAPH, content: [], data: {} };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'Value must be one of expected values',\n        expected: ['document'],\n        name: 'in',\n        path: ['nodeType'],\n        value: 'paragraph',\n      },\n    ]);\n  });\n\n  it('fails if it has an invalid shape', () => {\n    // @ts-expect-error we force a wrong node type to check that it fails\n    const document: Document = { nodeType: BLOCKS.DOCUMENT };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        name: 'required',\n        path: ['content'],\n        details: 'The property \"content\" is required here',\n      },\n      {\n        name: 'required',\n        path: ['data'],\n        details: 'The property \"data\" is required here',\n      },\n    ]);\n  });\n\n  it('fails if it has nested documents', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      // @ts-expect-error we force a wrong node type to check that it fails\n      content: [{ nodeType: BLOCKS.DOCUMENT, content: [], data: {} }],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'Value must be one of expected values',\n        expected: [\n          'blockquote',\n          'embedded-asset-block',\n          'embedded-entry-block',\n          'embedded-resource-block',\n          'heading-1',\n          'heading-2',\n          'heading-3',\n          'heading-4',\n          'heading-5',\n          'heading-6',\n          'hr',\n          'ordered-list',\n          'paragraph',\n          'table',\n          'unordered-list',\n        ],\n        name: 'in',\n        path: ['content', 0, 'nodeType'],\n        value: 'document',\n      },\n    ]);\n  });\n\n  it('fails without a nodeType property', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      // @ts-expect-error we force a wrong node type to check that it fails\n      content: [{ content: [], data: {} }],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'Value must be one of expected values',\n        expected: [\n          'blockquote',\n          'embedded-asset-block',\n          'embedded-entry-block',\n          'embedded-resource-block',\n          'heading-1',\n          'heading-2',\n          'heading-3',\n          'heading-4',\n          'heading-5',\n          'heading-6',\n          'hr',\n          'ordered-list',\n          'paragraph',\n          'table',\n          'unordered-list',\n        ],\n        name: 'in',\n        path: ['content', 0, 'nodeType'],\n        value: undefined,\n      },\n    ]);\n  });\n\n  it('fails on custom nodeTypes (unknown nodeType)', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      // @ts-expect-error we force a wrong node type to check that it fails\n      content: [{ nodeType: 'custom-node-type', content: [], data: {} }],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'Value must be one of expected values',\n        expected: [\n          'blockquote',\n          'embedded-asset-block',\n          'embedded-entry-block',\n          'embedded-resource-block',\n          'heading-1',\n          'heading-2',\n          'heading-3',\n          'heading-4',\n          'heading-5',\n          'heading-6',\n          'hr',\n          'ordered-list',\n          'paragraph',\n          'table',\n          'unordered-list',\n        ],\n        name: 'in',\n        path: ['content', 0, 'nodeType'],\n        value: 'custom-node-type',\n      },\n    ]);\n  });\n\n  it('fails without a content property', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      // @ts-expect-error we force a wrong node type to check that it fails\n      content: [{ nodeType: BLOCKS.PARAGRAPH, data: {} }],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'The property \"content\" is required here',\n        name: 'required',\n        path: ['content', 0, 'content'],\n        value: undefined,\n      },\n    ]);\n  });\n\n  it('fails with a invalid content property', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      // @ts-expect-error we force a wrong type to check that it fails\n      content: [{ nodeType: BLOCKS.PARAGRAPH, content: 'Hello World', data: {} }],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'The type of \"content\" is incorrect, expected type: Array',\n        name: 'type',\n        path: ['content', 0, 'content'],\n        type: 'Array',\n        value: 'Hello World',\n      },\n    ]);\n  });\n\n  it('fails without data property', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      // @ts-expect-error we force a wrong node type to check that it fails\n      content: [{ nodeType: BLOCKS.PARAGRAPH, content: [] }],\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'The property \"data\" is required here',\n        name: 'required',\n        path: ['data'],\n      },\n    ]);\n  });\n\n  it('fails with invalid data property', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [{ nodeType: BLOCKS.PARAGRAPH, content: [], data: null }],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'The type of \"data\" is incorrect, expected type: Object',\n        name: 'type',\n        path: ['content', 0, 'data'],\n        type: 'Object',\n        value: null,\n      },\n    ]);\n  });\n\n  it('fails if undefined is in the content list', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [{ nodeType: BLOCKS.PARAGRAPH, content: [], data: {} }, undefined],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'The type of \"1\" is incorrect, expected type: Object',\n        name: 'type',\n        path: ['content', 1],\n        type: 'Object',\n        value: undefined,\n      },\n    ]);\n  });\n\n  it('fails if undefined is in the content list of child nodes', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          nodeType: BLOCKS.UL_LIST,\n          content: [\n            {\n              nodeType: BLOCKS.LIST_ITEM,\n              content: [{ nodeType: BLOCKS.PARAGRAPH, content: [], data: {} }, undefined],\n              data: {},\n            },\n          ],\n          data: {},\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'The type of \"1\" is incorrect, expected type: Object',\n        name: 'type',\n        path: ['content', 0, 'content', 0, 'content', 1],\n        type: 'Object',\n        value: undefined,\n      },\n    ]);\n  });\n\n  it('fails with unknown properties', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [],\n      data: {},\n      // @ts-expect-error we force a wrong property to check that it fails\n      myCustomProperty: 'Hello World',\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'The property \"myCustomProperty\" is not expected',\n        name: 'unexpected',\n        path: ['myCustomProperty'],\n      },\n    ]);\n  });\n\n  it.each([BLOCKS.LIST_ITEM, BLOCKS.TABLE_ROW, BLOCKS.TABLE_HEADER_CELL, BLOCKS.TABLE_CELL])(\n    'fails with a invalid block node as children (nodeType: %s) of the root node',\n    (nodeType) => {\n      const document: Document = {\n        nodeType: BLOCKS.DOCUMENT,\n        content: [\n          {\n            // @ts-expect-error we force a wrong node type to check that it fails\n            nodeType,\n            content: [],\n            data: {},\n          },\n        ],\n        data: {},\n      };\n\n      expect(validateRichTextDocument(document)).toEqual([\n        {\n          details: 'Value must be one of expected values',\n          expected: [\n            'blockquote',\n            'embedded-asset-block',\n            'embedded-entry-block',\n            'embedded-resource-block',\n            'heading-1',\n            'heading-2',\n            'heading-3',\n            'heading-4',\n            'heading-5',\n            'heading-6',\n            'hr',\n            'ordered-list',\n            'paragraph',\n            'table',\n            'unordered-list',\n          ],\n          name: 'in',\n          path: ['content', 0, 'nodeType'],\n          value: nodeType,\n        },\n      ]);\n    },\n  );\n\n  it.each(Object.values(INLINES))(\n    'fails with a inline node (%s) as direct children of the root node',\n    (nodeType) => {\n      const document: Document = {\n        nodeType: BLOCKS.DOCUMENT,\n        content: [\n          {\n            // @ts-expect-error we force a wrong node type to check that it fails\n            nodeType,\n            content: [],\n            data: {},\n          },\n        ],\n        data: {},\n      };\n\n      expect(validateRichTextDocument(document)).toEqual([\n        {\n          details: 'Value must be one of expected values',\n          expected: [\n            'blockquote',\n            'embedded-asset-block',\n            'embedded-entry-block',\n            'embedded-resource-block',\n            'heading-1',\n            'heading-2',\n            'heading-3',\n            'heading-4',\n            'heading-5',\n            'heading-6',\n            'hr',\n            'ordered-list',\n            'paragraph',\n            'table',\n            'unordered-list',\n          ],\n          name: 'in',\n          path: ['content', 0, 'nodeType'],\n          value: nodeType,\n        },\n      ]);\n    },\n  );\n\n  it('fails with text as a direct children of the root node', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          // @ts-expect-error we force a wrong node type to check that it fails\n          nodeType: 'text',\n          data: {},\n          marks: [],\n          value: 'Hello World',\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'Value must be one of expected values',\n        expected: [\n          'blockquote',\n          'embedded-asset-block',\n          'embedded-entry-block',\n          'embedded-resource-block',\n          'heading-1',\n          'heading-2',\n          'heading-3',\n          'heading-4',\n          'heading-5',\n          'heading-6',\n          'hr',\n          'ordered-list',\n          'paragraph',\n          'table',\n          'unordered-list',\n        ],\n        name: 'in',\n        path: ['content', 0, 'nodeType'],\n        value: 'text',\n      },\n    ]);\n  });\n\n  it('fails with inline node and text as a direct children of the root node', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          // @ts-expect-error we force a wrong node type to check that it fails\n          nodeType: 'text',\n          data: {},\n          marks: [],\n          value: 'Hello World',\n        },\n        {\n          // @ts-expect-error we force a wrong node type to check that it fails\n          nodeType: INLINES.ASSET_HYPERLINK,\n          data: { target: {} },\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'Value must be one of expected values',\n        expected: [\n          'blockquote',\n          'embedded-asset-block',\n          'embedded-entry-block',\n          'embedded-resource-block',\n          'heading-1',\n          'heading-2',\n          'heading-3',\n          'heading-4',\n          'heading-5',\n          'heading-6',\n          'hr',\n          'ordered-list',\n          'paragraph',\n          'table',\n          'unordered-list',\n        ],\n        name: 'in',\n        path: ['content', 0, 'nodeType'],\n        value: 'text',\n      },\n    ]);\n  });\n\n  it.each([BLOCKS.OL_LIST, BLOCKS.UL_LIST] as const)(\n    'fails for invalid block nodes inside of (%s)',\n    (nodeType) => {\n      const document: Document = {\n        nodeType: BLOCKS.DOCUMENT,\n        content: [\n          {\n            nodeType: nodeType,\n            content: [{ nodeType: BLOCKS.PARAGRAPH, content: [], data: {} }],\n            data: {},\n          },\n        ],\n        data: {},\n      };\n\n      expect(validateRichTextDocument(document)).toEqual([\n        {\n          details: 'Value must be one of expected values',\n          expected: [BLOCKS.LIST_ITEM],\n          name: 'in',\n          path: ['content', 0, 'content', 0, 'nodeType'],\n          value: BLOCKS.PARAGRAPH,\n        },\n      ]);\n    },\n  );\n\n  it('fails on text node directly inside of a list item node', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          nodeType: BLOCKS.UL_LIST,\n          content: [\n            {\n              nodeType: BLOCKS.LIST_ITEM,\n              content: [\n                {\n                  nodeType: 'text',\n                  data: {},\n                  value: 'Hello World',\n                  marks: [],\n                },\n              ],\n              data: {},\n            },\n          ],\n          data: {},\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'Value must be one of expected values',\n        expected: [\n          'blockquote',\n          'embedded-asset-block',\n          'embedded-entry-block',\n          'embedded-resource-block',\n          'heading-1',\n          'heading-2',\n          'heading-3',\n          'heading-4',\n          'heading-5',\n          'heading-6',\n          'hr',\n          'ordered-list',\n          'paragraph',\n          'unordered-list',\n        ],\n        name: 'in',\n        path: ['content', 0, 'content', 0, 'content', 0, 'nodeType'],\n        value: 'text',\n      },\n    ]);\n  });\n\n  it('fails on invalid block nodes inside of a table node', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          nodeType: BLOCKS.TABLE,\n          content: [{ nodeType: BLOCKS.PARAGRAPH, content: [], data: {} }],\n          data: {},\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'Value must be one of expected values',\n        expected: [BLOCKS.TABLE_ROW],\n        name: 'in',\n        path: ['content', 0, 'content', 0, 'nodeType'],\n        value: BLOCKS.PARAGRAPH,\n      },\n    ]);\n  });\n\n  it('fails on invalid block nodes inside of a table row node', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          nodeType: BLOCKS.TABLE,\n          content: [\n            {\n              nodeType: BLOCKS.TABLE_ROW,\n              content: [{ nodeType: BLOCKS.PARAGRAPH, content: [], data: {} }],\n              data: {},\n            },\n          ],\n          data: {},\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'Value must be one of expected values',\n        expected: [BLOCKS.TABLE_CELL, BLOCKS.TABLE_HEADER_CELL],\n        name: 'in',\n        path: ['content', 0, 'content', 0, 'content', 0, 'nodeType'],\n        value: BLOCKS.PARAGRAPH,\n      },\n    ]);\n  });\n\n  it('fails on invalid block nodes inside of a table header node', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          nodeType: BLOCKS.TABLE,\n          content: [\n            {\n              nodeType: BLOCKS.TABLE_ROW,\n              content: [{ nodeType: BLOCKS.PARAGRAPH, content: [], data: {} }],\n              data: {},\n            },\n          ],\n          data: {},\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'Value must be one of expected values',\n        expected: [BLOCKS.TABLE_CELL, BLOCKS.TABLE_HEADER_CELL],\n        name: 'in',\n        path: ['content', 0, 'content', 0, 'content', 0, 'nodeType'],\n        value: BLOCKS.PARAGRAPH,\n      },\n    ]);\n  });\n\n  it.each([BLOCKS.TABLE_CELL, BLOCKS.TABLE_HEADER_CELL] as const)(\n    'fails on invalid node inside of %s',\n    (nodeType) => {\n      const document: Document = {\n        nodeType: BLOCKS.DOCUMENT,\n        content: [\n          {\n            nodeType: BLOCKS.TABLE,\n            content: [\n              {\n                nodeType: BLOCKS.TABLE_ROW,\n                content: [\n                  {\n                    nodeType,\n                    content: [{ nodeType: 'text', data: {}, marks: [], value: 'Hello World' }],\n                    data: {},\n                  },\n                ],\n                data: {},\n              },\n            ],\n            data: {},\n          },\n        ],\n        data: {},\n      };\n\n      expect(validateRichTextDocument(document)).toEqual([\n        {\n          details: 'Value must be one of expected values',\n          expected: [BLOCKS.PARAGRAPH],\n          name: 'in',\n          path: ['content', 0, 'content', 0, 'content', 0, 'content', 0, 'nodeType'],\n          value: 'text',\n        },\n      ]);\n    },\n  );\n\n  it('fails if a table node has not at least one table row', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          nodeType: BLOCKS.TABLE,\n          content: [],\n          data: {},\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'Size must be at least 1',\n        min: 1,\n        name: 'size',\n        path: ['content', 0, 'content'],\n        value: [],\n      },\n    ]);\n  });\n\n  it('fails if a table row node has not at least one table cell', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          nodeType: BLOCKS.TABLE,\n          content: [\n            {\n              nodeType: BLOCKS.TABLE_ROW,\n              content: [],\n              data: {},\n            },\n          ],\n          data: {},\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'Size must be at least 1',\n        min: 1,\n        name: 'size',\n        path: ['content', 0, 'content', 0, 'content'],\n        value: [],\n      },\n    ]);\n  });\n\n  it.each([BLOCKS.TABLE_CELL, BLOCKS.TABLE_HEADER_CELL] as const)(\n    'fails if a %s has not at least one child',\n    (nodeType) => {\n      const document: Document = {\n        nodeType: BLOCKS.DOCUMENT,\n        content: [\n          {\n            nodeType: BLOCKS.TABLE,\n            content: [\n              {\n                nodeType: BLOCKS.TABLE_ROW,\n                content: [\n                  {\n                    nodeType,\n                    content: [],\n                    data: {},\n                  },\n                ],\n                data: {},\n              },\n            ],\n            data: {},\n          },\n        ],\n        data: {},\n      };\n\n      expect(validateRichTextDocument(document)).toEqual([\n        {\n          details: 'Size must be at least 1',\n          min: 1,\n          name: 'size',\n          path: ['content', 0, 'content', 0, 'content', 0, 'content'],\n          value: [],\n        },\n      ]);\n    },\n  );\n\n  it('fails if inline nodes contains something else as a inline node or text', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          nodeType: BLOCKS.PARAGRAPH,\n          content: [\n            {\n              nodeType: INLINES.HYPERLINK,\n              // @ts-expect-error we force a wrong node type to check that it fails\n              content: [{ nodeType: BLOCKS.PARAGRAPH, content: [], data: {} }],\n              data: { uri: '' },\n            },\n          ],\n          data: {},\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'Value must be one of expected values',\n        expected: ['text'],\n        name: 'in',\n        path: ['content', 0, 'content', 0, 'content', 0, 'nodeType'],\n        value: BLOCKS.PARAGRAPH,\n      },\n    ]);\n  });\n\n  it.each([\n    BLOCKS.HEADING_1,\n    BLOCKS.HEADING_2,\n    BLOCKS.HEADING_3,\n    BLOCKS.HEADING_4,\n    BLOCKS.HEADING_5,\n    BLOCKS.HEADING_6,\n  ] as const)(\n    'fails if the headline node (%s) contains something else as a inline or text node',\n    (nodeType) => {\n      const document: Document = {\n        nodeType: BLOCKS.DOCUMENT,\n        content: [\n          {\n            nodeType,\n            content: [\n              {\n                nodeType: BLOCKS.QUOTE,\n                content: [{ nodeType: 'text', value: 'Hello World', data: {}, marks: [] }],\n                data: {},\n              },\n            ],\n            data: {},\n          },\n        ],\n        data: {},\n      };\n\n      expect(validateRichTextDocument(document)).toEqual([\n        {\n          details: 'Value must be one of expected values',\n          expected: [\n            'asset-hyperlink',\n            'embedded-entry-inline',\n            'embedded-resource-inline',\n            'entry-hyperlink',\n            'hyperlink',\n            'resource-hyperlink',\n            'text',\n          ],\n          name: 'in',\n          path: ['content', 0, 'content', 0, 'nodeType'],\n          value: BLOCKS.QUOTE,\n        },\n      ]);\n    },\n  );\n\n  it('fails on invalid block nodes inside of a quote node', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          nodeType: BLOCKS.QUOTE,\n          content: [\n            {\n              nodeType: BLOCKS.HEADING_1,\n              content: [{ nodeType: 'text', value: 'Hello World', data: {}, marks: [] }],\n              data: {},\n            },\n          ],\n          data: {},\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'Value must be one of expected values',\n        expected: [BLOCKS.PARAGRAPH],\n        name: 'in',\n        path: ['content', 0, 'content', 0, 'nodeType'],\n        value: BLOCKS.HEADING_1,\n      },\n    ]);\n  });\n\n  it('fails without value property on text nodes', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          nodeType: BLOCKS.PARAGRAPH,\n          content: [\n            {\n              nodeType: 'text',\n              value: null,\n              data: {},\n              marks: [],\n            },\n          ],\n          data: {},\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'The type of \"value\" is incorrect, expected type: String',\n        name: 'type',\n        path: ['content', 0, 'content', 0, 'value'],\n        type: 'String',\n        value: null,\n      },\n    ]);\n  });\n\n  it('fails with invalid row/colspan on table cell nodes', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          nodeType: BLOCKS.TABLE,\n          content: [\n            {\n              nodeType: BLOCKS.TABLE_ROW,\n              content: [\n                {\n                  nodeType: BLOCKS.TABLE_CELL,\n                  content: [\n                    {\n                      nodeType: BLOCKS.PARAGRAPH,\n                      content: [{ nodeType: 'text', value: 'Hello Table', data: {}, marks: [] }],\n                      data: {},\n                    },\n                  ],\n                  data: { rowspan: 'argh' },\n                },\n              ],\n              data: {},\n            },\n          ],\n          data: {},\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'The type of \"rowspan\" is incorrect, expected type: Number',\n        name: 'type',\n        path: ['content', 0, 'content', 0, 'content', 0, 'data', 'rowspan'],\n        type: 'Number',\n        value: 'argh',\n      },\n    ]);\n  });\n\n  it.each([INLINES.ASSET_HYPERLINK, INLINES.ENTRY_HYPERLINK, INLINES.RESOURCE_HYPERLINK] as const)(\n    'fails with invalid properties for %s',\n    (nodeType) => {\n      const document: Document = {\n        nodeType: BLOCKS.DOCUMENT,\n        content: [\n          {\n            nodeType: BLOCKS.PARAGRAPH,\n            content: [\n              {\n                nodeType,\n                data: {},\n                content: [{ nodeType: 'text', value: `Hello ${nodeType}`, data: {}, marks: [] }],\n              },\n            ],\n            data: {},\n          },\n        ],\n        data: {},\n      };\n\n      expect(validateRichTextDocument(document)).toEqual([\n        {\n          details: 'The property \"target\" is required here',\n          name: 'required',\n          path: ['content', 0, 'content', 0, 'data', 'target'],\n        },\n      ]);\n    },\n  );\n\n  it('fails with invalid properties for hypperlink node', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          nodeType: BLOCKS.PARAGRAPH,\n          content: [\n            {\n              nodeType: INLINES.HYPERLINK,\n              data: {},\n              content: [{ nodeType: 'text', value: 'Hello hyperlink', data: {}, marks: [] }],\n            },\n          ],\n          data: {},\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([\n      {\n        details: 'The property \"uri\" is required here',\n        name: 'required',\n        path: ['content', 0, 'content', 0, 'data', 'uri'],\n      },\n    ]);\n  });\n\n  it.each([INLINES.EMBEDDED_ENTRY, INLINES.EMBEDDED_RESOURCE] as const)(\n    'fails with invalid properties for %s',\n    (nodeType) => {\n      const document: Document = {\n        nodeType: BLOCKS.DOCUMENT,\n        content: [\n          {\n            nodeType: BLOCKS.PARAGRAPH,\n            content: [\n              {\n                nodeType,\n                data: {},\n                content: [],\n              },\n            ],\n            data: {},\n          },\n        ],\n        data: {},\n      };\n\n      expect(validateRichTextDocument(document)).toEqual([\n        {\n          details: 'The property \"target\" is required here',\n          name: 'required',\n          path: ['content', 0, 'content', 0, 'data', 'target'],\n        },\n      ]);\n    },\n  );\n\n  it('succeeds with a valid structure', () => {\n    const document: Document = {\n      nodeType: BLOCKS.DOCUMENT,\n      content: [\n        {\n          nodeType: BLOCKS.PARAGRAPH,\n          content: [{ nodeType: 'text', value: 'Hello World', data: {}, marks: [] }],\n          data: {},\n        },\n        {\n          nodeType: BLOCKS.HEADING_1,\n          content: [{ nodeType: 'text', value: 'Hello Headline', data: {}, marks: [] }],\n          data: {},\n        },\n        {\n          nodeType: BLOCKS.UL_LIST,\n          content: [\n            {\n              nodeType: BLOCKS.LIST_ITEM,\n              content: [\n                {\n                  nodeType: BLOCKS.PARAGRAPH,\n                  content: [{ nodeType: 'text', value: 'Hello List', data: {}, marks: [] }],\n                  data: {},\n                },\n              ],\n              data: {},\n            },\n          ],\n          data: {},\n        },\n        {\n          nodeType: BLOCKS.TABLE,\n          content: [\n            {\n              nodeType: BLOCKS.TABLE_ROW,\n              content: [\n                {\n                  nodeType: BLOCKS.TABLE_CELL,\n                  content: [\n                    {\n                      nodeType: BLOCKS.PARAGRAPH,\n                      content: [{ nodeType: 'text', value: 'Hello Table', data: {}, marks: [] }],\n                      data: {},\n                    },\n                  ],\n                  data: { rowspan: 2, colspan: 2 },\n                },\n              ],\n              data: {},\n            },\n          ],\n          data: {},\n        },\n      ],\n      data: {},\n    };\n\n    expect(validateRichTextDocument(document)).toEqual([]);\n  });\n});\n"]}