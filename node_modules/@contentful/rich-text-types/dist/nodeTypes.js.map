{"version":3,"file":"nodeTypes.js","sourceRoot":"","sources":["../src/nodeTypes.ts"],"names":[],"mappings":"","sourcesContent":["import { BLOCKS } from './blocks';\nimport { INLINES } from './inlines';\nimport { Block, Inline, ListItemBlock, Text } from './types';\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype EmptyNodeData = {};\n// BLOCKS\n\n// Heading\nexport interface Heading1 extends Block {\n  nodeType: BLOCKS.HEADING_1;\n  data: EmptyNodeData;\n  content: Array<Inline | Text>;\n}\n\nexport interface Heading2 extends Block {\n  nodeType: BLOCKS.HEADING_2;\n  data: EmptyNodeData;\n  content: Array<Inline | Text>;\n}\n\nexport interface Heading3 extends Block {\n  nodeType: BLOCKS.HEADING_3;\n  data: EmptyNodeData;\n  content: Array<Inline | Text>;\n}\n\nexport interface Heading4 extends Block {\n  nodeType: BLOCKS.HEADING_4;\n  data: EmptyNodeData;\n  content: Array<Inline | Text>;\n}\n\nexport interface Heading5 extends Block {\n  nodeType: BLOCKS.HEADING_5;\n  data: EmptyNodeData;\n  content: Array<Inline | Text>;\n}\n\nexport interface Heading6 extends Block {\n  nodeType: BLOCKS.HEADING_6;\n  data: EmptyNodeData;\n  content: Array<Inline | Text>;\n}\n\n// Paragraph\nexport interface Paragraph extends Block {\n  nodeType: BLOCKS.PARAGRAPH;\n  data: EmptyNodeData;\n  content: Array<Inline | Text>;\n}\n\n// Quote\nexport interface Quote extends Block {\n  nodeType: BLOCKS.QUOTE;\n  data: EmptyNodeData;\n  content: Paragraph[];\n}\n// Horizontal rule\nexport interface Hr extends Block {\n  nodeType: BLOCKS.HR;\n  /**\n   *\n   * @maxItems 0\n   */\n  data: EmptyNodeData;\n  content: Array<Inline | Text>;\n}\n\n// OL\nexport interface OrderedList extends Block {\n  nodeType: BLOCKS.OL_LIST;\n  data: EmptyNodeData;\n  content: ListItem[];\n}\n// UL\nexport interface UnorderedList extends Block {\n  nodeType: BLOCKS.UL_LIST;\n  data: EmptyNodeData;\n  content: ListItem[];\n}\n\nexport interface ListItem extends Block {\n  nodeType: BLOCKS.LIST_ITEM;\n  data: EmptyNodeData;\n  content: ListItemBlock[];\n}\n\n// taken from graphql schema-generator/contentful-types/link.ts\nexport interface Link<T extends string = string> {\n  sys: {\n    type: 'Link';\n    linkType: T;\n    id: string;\n  };\n}\n\nexport interface ResourceLink {\n  sys: {\n    type: 'ResourceLink';\n    linkType: 'Contentful:Entry';\n    urn: string;\n  };\n}\n\nexport interface EntryLinkBlock extends Block {\n  nodeType: BLOCKS.EMBEDDED_ENTRY;\n  data: {\n    target: Link<'Entry'>;\n  };\n  /**\n   *\n   * @maxItems 0\n   */\n  content: Array<Inline | Text>;\n}\n\nexport interface AssetLinkBlock extends Block {\n  nodeType: BLOCKS.EMBEDDED_ASSET;\n  data: {\n    target: Link<'Asset'>;\n  };\n  /**\n   *\n   * @maxItems 0\n   */\n  content: Array<Inline | Text>;\n}\n\nexport interface ResourceLinkBlock extends Block {\n  nodeType: BLOCKS.EMBEDDED_RESOURCE;\n  data: {\n    target: ResourceLink;\n  };\n  /**\n   *\n   * @maxItems 0\n   */\n  content: Array<Inline | Text>;\n}\n\n// INLINE\n\nexport interface EntryLinkInline extends Inline {\n  nodeType: INLINES.EMBEDDED_ENTRY;\n  data: {\n    target: Link<'Entry'>;\n  };\n  /**\n   *\n   * @maxItems 0\n   */\n  content: Text[];\n}\n\nexport interface ResourceLinkInline extends Inline {\n  nodeType: INLINES.EMBEDDED_RESOURCE;\n  data: {\n    target: ResourceLink;\n  };\n  /**\n   *\n   * @maxItems 0\n   */\n  content: Text[];\n}\n\nexport interface Hyperlink extends Inline {\n  nodeType: INLINES.HYPERLINK;\n  data: {\n    uri: string;\n  };\n  content: Text[];\n}\n\nexport interface AssetHyperlink extends Inline {\n  nodeType: INLINES.ASSET_HYPERLINK;\n  data: {\n    target: Link<'Asset'>;\n  };\n  content: Text[];\n}\n\nexport interface EntryHyperlink extends Inline {\n  nodeType: INLINES.ENTRY_HYPERLINK;\n  data: {\n    target: Link<'Entry'>;\n  };\n  content: Text[];\n}\n\nexport interface ResourceHyperlink extends Inline {\n  nodeType: INLINES.RESOURCE_HYPERLINK;\n  data: {\n    target: ResourceLink;\n  };\n  content: Text[];\n}\n\nexport interface TableCell extends Block {\n  nodeType: BLOCKS.TABLE_HEADER_CELL | BLOCKS.TABLE_CELL;\n  data: {\n    colspan?: number;\n    rowspan?: number;\n  };\n\n  /**\n   * @minItems 1\n   */\n  content: Paragraph[];\n}\n\nexport interface TableHeaderCell extends TableCell {\n  nodeType: BLOCKS.TABLE_HEADER_CELL;\n}\n\n// An abstract table row can have both table cell types\n\nexport interface TableRow extends Block {\n  nodeType: BLOCKS.TABLE_ROW;\n  data: EmptyNodeData;\n\n  /**\n   * @minItems 1\n   */\n  content: TableCell[];\n}\n\nexport interface Table extends Block {\n  nodeType: BLOCKS.TABLE;\n  data: EmptyNodeData;\n\n  /**\n   * @minItems 1\n   */\n  content: TableRow[];\n}\n"]}