{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../src/validator/errors.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGO,IAAM,iBAAiB,GAAG,UAAC,EAUjC;QATC,IAAI,UAAA,EACJ,QAAQ,cAAA,EACR,QAAQ,cAAA,EACR,KAAK,WAAA;IAOL,OAAO;QACL,OAAO,EAAE,wBAAgB,QAAQ,6CAAkC,QAAQ,CAAE;QAC7E,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE;QACpB,IAAI,EAAE,QAAQ;QACd,KAAK,OAAA;KACN,CAAC;AACJ,CAAC,CAAC;AAlBW,QAAA,iBAAiB,qBAkB5B;AAEK,IAAM,YAAY,GAAG,UAAC,EAQ5B;QAPC,GAAG,SAAA,EACH,KAAK,WAAA,EACL,IAAI,UAAA;IAMJ,OAAO;QACL,IAAI,EAAE,MAAM;QACZ,GAAG,KAAA;QACH,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE;QACpB,OAAO,EAAE,gCAAyB,GAAG,CAAE;QACvC,KAAK,OAAA;KACN,CAAC;AACJ,CAAC,CAAC;AAhBW,QAAA,YAAY,gBAgBvB;AAEK,IAAM,YAAY,GAAG,UAAC,EAQ5B;QAPC,GAAG,SAAA,EACH,KAAK,WAAA,EACL,IAAI,UAAA;IAMJ,OAAO;QACL,IAAI,EAAE,MAAM;QACZ,GAAG,KAAA;QACH,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE;QACpB,OAAO,EAAE,+BAAwB,GAAG,CAAE;QACtC,KAAK,OAAA;KACN,CAAC;AACJ,CAAC,CAAC;AAhBW,QAAA,YAAY,gBAgBvB;AAEK,IAAM,SAAS,GAAG,UAAC,EAQzB;QAPC,QAAQ,cAAA,EACR,KAAK,WAAA,EACL,IAAI,UAAA;IAMJ,OAAO;QACL,OAAO,EAAE,sCAAsC;QAC/C,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,kBAAI,QAAQ,QAAE,IAAI,EAAE;QAC9B,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE;QACpB,KAAK,OAAA;KACN,CAAC;AACJ,CAAC,CAAC;AAhBW,QAAA,SAAS,aAgBpB;AAEK,IAAM,oBAAoB,GAAG,UAAC,EAMpC;QALC,QAAQ,cAAA,EACR,IAAI,UAAA;IAKJ,OAAO;QACL,OAAO,EAAE,yBAAiB,QAAQ,uBAAmB;QACrD,IAAI,EAAE,YAAY;QAClB,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE;KACrB,CAAC;AACJ,CAAC,CAAC;AAZW,QAAA,oBAAoB,wBAY/B;AAEK,IAAM,qBAAqB,GAAG,UAAC,EAMrC;QALC,QAAQ,cAAA,EACR,IAAI,UAAA;IAKJ,OAAO;QACL,OAAO,EAAE,yBAAiB,QAAQ,wBAAoB;QACtD,IAAI,EAAE,UAAU;QAChB,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE;KACrB,CAAC;AACJ,CAAC,CAAC;AAZW,QAAA,qBAAqB,yBAYhC","sourcesContent":["import { ValidationError } from '.';\nimport type { Path } from './path';\n\nexport const typeMismatchError = ({\n  path,\n  property,\n  typeName,\n  value,\n}: {\n  path: Path;\n  property: string | number;\n  typeName: string;\n  value: any;\n}): ValidationError => {\n  return {\n    details: `The type of \"${property}\" is incorrect, expected type: ${typeName}`,\n    name: 'type',\n    path: path.toArray(),\n    type: typeName,\n    value,\n  };\n};\n\nexport const minSizeError = ({\n  min,\n  value,\n  path,\n}: {\n  min: number;\n  value: any;\n  path: Path;\n}): ValidationError => {\n  return {\n    name: 'size',\n    min,\n    path: path.toArray(),\n    details: `Size must be at least ${min}`,\n    value,\n  };\n};\n\nexport const maxSizeError = ({\n  max,\n  value,\n  path,\n}: {\n  max: number;\n  value: any;\n  path: Path;\n}): ValidationError => {\n  return {\n    name: 'size',\n    max,\n    path: path.toArray(),\n    details: `Size must be at most ${max}`,\n    value,\n  };\n};\n\nexport const enumError = ({\n  expected,\n  value,\n  path,\n}: {\n  expected: string[];\n  value: any;\n  path: Path;\n}): ValidationError => {\n  return {\n    details: `Value must be one of expected values`,\n    name: 'in',\n    expected: [...expected].sort(),\n    path: path.toArray(),\n    value,\n  };\n};\n\nexport const unknownPropertyError = ({\n  property,\n  path,\n}: {\n  property: string;\n  path: Path;\n}): ValidationError => {\n  return {\n    details: `The property \"${property}\" is not expected`,\n    name: 'unexpected',\n    path: path.toArray(),\n  };\n};\n\nexport const requiredPropertyError = ({\n  property,\n  path,\n}: {\n  property: string;\n  path: Path;\n}): ValidationError => {\n  return {\n    details: `The property \"${property}\" is required here`,\n    name: 'required',\n    path: path.toArray(),\n  };\n};\n"]}