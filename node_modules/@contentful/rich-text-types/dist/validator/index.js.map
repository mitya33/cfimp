{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/validator/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { BLOCKS } from '../blocks';\nimport { INLINES } from '../inlines';\nimport { CONTAINERS, LIST_ITEM_BLOCKS, TOP_LEVEL_BLOCKS } from '../schemaConstraints';\nimport { Document, Text } from '../types';\nimport { ObjectAssertion } from './assert';\nimport { NodeAssertion, Node, HyperLinkAssertion, assert, assertLink, VOID_CONTENT } from './node';\nimport { Path } from './path';\nimport { assertText } from './text';\n\nexport type ValidationError = {\n  name: string;\n  type?: string;\n  value?: Record<string, any> | string | number | boolean | null;\n  min?: number | string;\n  max?: number | string;\n  details?: string | null;\n  path?: (string | number)[];\n  contentTypeId?: string | string[];\n  nodeType?: string;\n  customMessage?: string;\n  expected?: string[];\n};\n\nconst assertInlineOrText = assert([...Object.values(INLINES), 'text'].sort());\n\nconst assertList = assert([BLOCKS.LIST_ITEM]);\nconst assertVoidEntryLink = assertLink('Entry', VOID_CONTENT);\nconst assertTableCell = assert(\n  () => ({\n    nodeTypes: [BLOCKS.PARAGRAPH],\n    min: 1,\n  }),\n  (data, path) => {\n    const $ = new ObjectAssertion(data, path);\n\n    $.noAdditionalProperties(['colspan', 'rowspan']);\n    $.number('colspan', true);\n    $.number('rowspan', true);\n\n    return $.errors;\n  },\n);\n\nconst nodeValidator: Record<Node['nodeType'], NodeAssertion<any>> = {\n  [BLOCKS.DOCUMENT]: assert(TOP_LEVEL_BLOCKS),\n  [BLOCKS.PARAGRAPH]: assertInlineOrText,\n  [BLOCKS.HEADING_1]: assertInlineOrText,\n  [BLOCKS.HEADING_2]: assertInlineOrText,\n  [BLOCKS.HEADING_3]: assertInlineOrText,\n  [BLOCKS.HEADING_4]: assertInlineOrText,\n  [BLOCKS.HEADING_5]: assertInlineOrText,\n  [BLOCKS.HEADING_6]: assertInlineOrText,\n  [BLOCKS.QUOTE]: assert(CONTAINERS[BLOCKS.QUOTE]),\n  [BLOCKS.EMBEDDED_ENTRY]: assertVoidEntryLink,\n  [BLOCKS.EMBEDDED_ASSET]: assertLink('Asset', VOID_CONTENT),\n  [BLOCKS.EMBEDDED_RESOURCE]: assertLink('Contentful:Entry', VOID_CONTENT),\n  [BLOCKS.HR]: assert(VOID_CONTENT),\n  [BLOCKS.OL_LIST]: assertList,\n  [BLOCKS.UL_LIST]: assertList,\n  [BLOCKS.LIST_ITEM]: assert([...LIST_ITEM_BLOCKS].sort()),\n  [BLOCKS.TABLE]: assert(() => ({\n    nodeTypes: [BLOCKS.TABLE_ROW],\n    min: 1,\n  })),\n  [BLOCKS.TABLE_ROW]: assert(() => ({\n    nodeTypes: [BLOCKS.TABLE_CELL, BLOCKS.TABLE_HEADER_CELL],\n    min: 1,\n  })),\n  [BLOCKS.TABLE_CELL]: assertTableCell,\n  [BLOCKS.TABLE_HEADER_CELL]: assertTableCell,\n  [INLINES.HYPERLINK]: new HyperLinkAssertion(),\n  [INLINES.EMBEDDED_ENTRY]: assertVoidEntryLink,\n  [INLINES.EMBEDDED_RESOURCE]: assertLink('Contentful:Entry', VOID_CONTENT),\n  [INLINES.ENTRY_HYPERLINK]: assertLink('Entry', ['text']),\n  [INLINES.ASSET_HYPERLINK]: assertLink('Asset', ['text']),\n  [INLINES.RESOURCE_HYPERLINK]: assertLink('Contentful:Entry', ['text']),\n};\n\nfunction validateNode(node: Node | Text, path: Path): ValidationError[] {\n  if (node.nodeType === 'text') {\n    return assertText(node, path);\n  }\n\n  const errors = nodeValidator[node.nodeType].assert(node, path);\n\n  if (errors.length > 0) {\n    return errors;\n  }\n\n  const $ = new ObjectAssertion(node, path);\n\n  $.each('content', (item, path) => {\n    // We already know those are valid nodes thanks to the assertion done in\n    // the NodeAssertion class\n    return validateNode(item, path);\n  });\n\n  return $.errors;\n}\n\nexport const validateRichTextDocument = (document: Document): ValidationError[] => {\n  const path = new Path();\n  const $ = new ObjectAssertion(document, path);\n\n  if ($.object()) {\n    $.enum('nodeType', [BLOCKS.DOCUMENT]);\n  }\n\n  if ($.errors.length > 0) {\n    return $.errors;\n  }\n\n  return validateNode(document, path);\n};\n"]}