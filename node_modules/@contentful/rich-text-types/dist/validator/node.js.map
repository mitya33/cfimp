{"version":3,"file":"node.js","sourceRoot":"","sources":["../../src/validator/node.ts"],"names":[],"mappings":"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","sourcesContent":["import { ValidationError } from '.';\nimport {\n  AssetHyperlink,\n  AssetLinkBlock,\n  EntryHyperlink,\n  EntryLinkBlock,\n  Hyperlink,\n  ResourceLinkBlock,\n  ResourceLinkInline,\n} from '../nodeTypes';\nimport { Block, Document, Inline } from '../types';\nimport { ObjectAssertion } from './assert';\nimport type { Path } from './path';\n\nexport type Node = Document | Block | Inline;\n\nexport type GetContentRule<T extends Node> =\n  | string[]\n  | ((\n      node: T,\n      path: Path,\n    ) => {\n      nodeTypes: string[];\n      min?: number;\n    });\n\nexport type ValidateData<T extends Node> = (data: T['data'], path: Path) => ValidationError[];\n\nexport const VOID_CONTENT: GetContentRule<Node> = [];\n\nexport class NodeAssertion<T extends Node = Node> {\n  constructor(\n    private contentRule: GetContentRule<T>,\n    private validateData?: ValidateData<T>,\n  ) {}\n\n  assert(node: T, path: Path): ValidationError[] {\n    const $ = new ObjectAssertion(node, path);\n\n    if (!$.object()) {\n      return $.errors;\n    }\n\n    $.noAdditionalProperties(['nodeType', 'data', 'content']);\n\n    const { nodeTypes, min = 0 } = Array.isArray(this.contentRule)\n      ? {\n          nodeTypes: this.contentRule,\n        }\n      : this.contentRule(node, path);\n\n    if (nodeTypes.length === 0 && min > 0) {\n      throw new Error(\n        `Invalid content rule. Cannot have enforce a 'min' of ${min} with no nodeTypes`,\n      );\n    }\n\n    $.minLength('content', min);\n\n    // Is void\n    if (nodeTypes.length === 0) {\n      $.empty('content');\n    }\n\n    // Ensure content nodes have valid nodeTypes without validating the full\n    // shape which is something that's only done later if the current node is\n    // valid.\n    else {\n      $.each('content', (item, path) => {\n        const item$ = new ObjectAssertion(item, path);\n\n        if (!item$.object()) {\n          return item$.errors;\n        }\n\n        item$.enum('nodeType', nodeTypes);\n\n        return item$.errors;\n      });\n    }\n\n    if ($.object('data')) {\n      const dataErrors = this.validateData?.(node.data, path.of('data')) ?? [];\n      $.catch(...dataErrors);\n    }\n\n    return $.errors;\n  }\n}\n\nexport class EntityLinkAssertion<\n  T extends\n    | EntryLinkBlock\n    | EntryHyperlink\n    | AssetLinkBlock\n    | AssetHyperlink\n    | ResourceLinkBlock\n    | ResourceLinkInline,\n> extends NodeAssertion<T> {\n  private type: 'ResourceLink' | 'Link';\n\n  constructor(\n    private linkType: 'Entry' | 'Asset' | 'Contentful:Entry',\n    contentNodeTypes: GetContentRule<T>,\n  ) {\n    super(contentNodeTypes, (data, path) => this.assertLink(data, path));\n    this.type = this.linkType.startsWith('Contentful:') ? 'ResourceLink' : 'Link';\n  }\n\n  private assertLink = (data: T['data'], path: Path): ValidationError[] => {\n    const $ = new ObjectAssertion(data, path);\n\n    if ($.object('target')) {\n      const sys$ = new ObjectAssertion(data.target.sys, path.of('target').of('sys'));\n\n      if (sys$.object()) {\n        sys$.enum('type', [this.type]);\n        sys$.enum('linkType', [this.linkType]);\n\n        if (this.type === 'Link') {\n          sys$.string('id');\n          sys$.noAdditionalProperties(['type', 'linkType', 'id']);\n        } else if (this.type === 'ResourceLink') {\n          sys$.string('urn');\n          sys$.noAdditionalProperties(['type', 'linkType', 'urn']);\n        }\n      }\n\n      $.catch(...sys$.errors);\n    }\n\n    $.noAdditionalProperties(['target']);\n\n    return $.errors;\n  };\n}\n\nexport class HyperLinkAssertion<T extends Hyperlink> extends NodeAssertion<T> {\n  constructor() {\n    super(['text'], (data, path) => this.assertLink(data, path));\n  }\n\n  private assertLink = (data: T['data'], path: Path): ValidationError[] => {\n    const $ = new ObjectAssertion(data, path);\n\n    $.string('uri');\n    $.noAdditionalProperties(['uri']);\n\n    return $.errors;\n  };\n}\n\nexport const assert = <T extends Node>(\n  contentRule: GetContentRule<T>,\n  validateData?: ValidateData<T>,\n): NodeAssertion<T> => {\n  return new NodeAssertion(contentRule, validateData);\n};\n\nexport const assertLink = <\n  T extends\n    | EntryLinkBlock\n    | EntryHyperlink\n    | AssetLinkBlock\n    | AssetHyperlink\n    | ResourceLinkBlock\n    | ResourceLinkInline,\n>(\n  linkType: 'Entry' | 'Asset' | 'Contentful:Entry',\n  contentRule: GetContentRule<T>,\n): EntityLinkAssertion<T> => {\n  return new EntityLinkAssertion(linkType, contentRule);\n};\n"]}